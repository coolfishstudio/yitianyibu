{"version":3,"sources":["../../../src/lib/content/manager.js"],"names":["findAll","queryOptions","options","count","removed","total","list","limit","find","sort","createdAt","skip","offset","meta","length","getById","id","findById","result","hitById","analyse","hits","save","getNearByCreatedAt","findOne","$lt","_id","prev","$gt","next","insert","create"],"mappings":"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","file":"manager.js","sourcesContent":["import Model from './model'\nimport { getMeta } from '../util/pagination'\n\nconst findAll = async (queryOptions = {}, options = {}) => {\n  const total = await Model.count(Object.assign({ removed: false }, options))\n  options = Object.assign(options, { removed: false })\n  let list = []\n  if (queryOptions.limit === -1) {\n    list = await Model.find(options).sort({ createdAt: -1 })\n  } else {\n    list = await Model.find(options).limit(queryOptions.limit).skip(queryOptions.offset).sort({ createdAt: -1 })\n  }\n  return {\n    meta: getMeta(total, list.length, queryOptions),\n    list\n  }\n}\n\nconst getById = async (id) => {\n  const result = await Model.findById(id)\n  return result\n}\n\nconst hitById = async (id) => {\n    let analyse = await Model.findById(id)\n    if (!analyse) {\n        return null\n    }\n    ++analyse.hits\n    const result = await analyse.save()\n    return result\n}\n\nconst getNearByCreatedAt = async (createdAt, options={}) => {\n  const prev = await Model.findOne(Object.assign({ removed: false, createdAt: { $lt: createdAt } }, options)).sort({ _id: -1 })\n  const next = await Model.findOne(Object.assign({ removed: false, createdAt: { $gt: createdAt } }, options)).sort({ _id: 1 })\n  return {\n    prev,\n    next\n  }\n}\n\nconst insert = async (options = {}) => {\n  const result = await Model.create(Object.assign({}, options))\n  return result\n}\n\nconst count = async (options = {}) => {\n  const total = await Model.count(Object.assign({ removed: false }, options))\n  return total\n}\n\nexport default {\n  findAll,\n  getById,\n  hitById,\n  getNearByCreatedAt,\n  insert,\n  count\n}\n"]}